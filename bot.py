# bot.py ‚Äî ECCues Telegram Bot (Render, PTB v22, aiohttp webhook, c√≥ ph√¢n trang)
import os
import re
import asyncio
import logging
import pandas as pd
from aiohttp import web
from dotenv import load_dotenv

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, BotCommand
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# ================== ENV & LOGGING ==================
load_dotenv()
BOT_TOKEN    = os.getenv("BOT_TOKEN")
CATALOG_PATH = os.getenv("CATALOG_PATH", "Exc.csv")

# L·∫•y URL webhook t·ª´ ENV ho·∫∑c RENDER_EXTERNAL_URL; ƒë·∫£m b·∫£o k·∫øt th√∫c b·∫±ng /telegram
WEBHOOK_URL  = os.getenv("WEBHOOK_URL") or os.getenv("RENDER_EXTERNAL_URL")
if WEBHOOK_URL:
    WEBHOOK_URL = WEBHOOK_URL.rstrip("/")
    if not WEBHOOK_URL.endswith("/telegram"):
        WEBHOOK_URL = WEBHOOK_URL + "/telegram"

PORT         = int(os.getenv("PORT", "10000"))

if not BOT_TOKEN:
    raise RuntimeError("Thi·∫øu BOT_TOKEN trong bi·∫øn m√¥i tr∆∞·ªùng.")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s"
)
logger = logging.getLogger("eccues-bot")

# ================== N·ªòI DUNG C·ªê ƒê·ªäNH ==================
MENU_LABELS = {
    "catalog":  "üìã Danh s√°ch s·∫£n ph·∫©m",
    "warranty": "üõ°Ô∏è Ch·∫ø ƒë·ªô b·∫£o h√†nh",
    "leadtime": "‚è≥ Th·ªùi gian s·∫£n xu·∫•t",
    "contact":  "üìû Li√™n h·ªá"
}

MAIN_KB = ReplyKeyboardMarkup(
    [
        [KeyboardButton(MENU_LABELS["catalog"])],
        [KeyboardButton(MENU_LABELS["warranty"])],
        [KeyboardButton(MENU_LABELS["leadtime"])],
        [KeyboardButton(MENU_LABELS["contact"])],
    ],
    resize_keyboard=True
)

WARRANTY_TEXT = (
    "üõ°Ô∏è *Ch·∫ø ƒë·ªô b·∫£o h√†nh*\n"
    "- H√†ng cao c·∫•p: cam k·∫øt ch·∫•t l∆∞·ª£ng gi·ªëng ch√≠nh h√£ng >95%\n"
    "- H√†ng trung b√¨nh: >90%\n"
    "- Zen: >90%\n"
    "- S∆°n l·∫°i mi·ªÖn ph√≠ 1 l·∫ßn (th·ªùi gian kh√¥ng qu√° 1 nƒÉm)"
)
LEADTIME_TEXT = "‚è≥ *Th·ªùi gian s·∫£n xu·∫•t*: th∆∞·ªùng 3‚Äì4 th√°ng (tu·ª≥ m·∫´u)."  # Kh√¥ng h·ªèi th·ªùi gian khi t∆∞ v·∫•n
CONTACT_TEXT = (
    "üìû *Li√™n h·ªá ch·ªët ƒë∆°n*\n"
    "Telegram: @eccues\n"
    "Facebook: https://www.facebook.com/ord.exc"
)

# ================== ƒê·ªåC CSV & TI·ªÜN √çCH ==================
def load_catalog(path: str) -> pd.DataFrame:
    df = None
    for enc in ["utf-8", "utf-8-sig", "latin1", "cp1252", "gb18030"]:
        try:
            df = pd.read_csv(path, encoding=enc)
            break
        except Exception:
            pass
    if df is None:
        logger.warning("Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c CSV '%s'. BOT v·∫´n ch·∫°y nh∆∞ng kh√¥ng tra ƒë∆∞·ª£c s·∫£n ph·∫©m.", path)
        df = pd.DataFrame()

    # d·ªçn c·ªôt
    df.columns = [str(c).strip() for c in df.columns]
    df = df.loc[:, ~df.columns.str.contains("^Unnamed", case=False)]

    # chu·∫©n t√™n c·ªôt ph·ªï bi·∫øn
    rename_map = {
        "M√£": "ma",
        "H√†ng th∆∞·ªùng": "hang_thuong",
        "H√†ng th??ng": "hang_thuong",
        "Cao c·∫•p": "cao_cap",
        "Cao c?p": "cao_cap",
        "Th·ªùi gian l√†m": "thoi_gian_lam",
        "Th?i gian l√†m": "thoi_gian_lam",
    }
    for k, v in rename_map.items():
        if k in df.columns:
            df = df.rename(columns={k: v})

    # ƒë·∫£m b·∫£o c·ªôt ch√≠nh t·ªìn t·∫°i
    for c in ["ma", "hang_thuong", "cao_cap"]:
        if c not in df.columns:
            df[c] = ""
    return df

CATALOG = load_catalog(CATALOG_PATH)

def clean_price_text(s: str) -> str:
    """'17m'/'17' -> '17 tri·ªáu' (ch·ªâ hi·ªÉn th·ªã ng·∫Øn g·ªçn)."""
    if not s: return ""
    s = str(s).strip()
    m = re.search(r"(\d+)", s)
    if not m: return s
    return f"{m.group(1)} tri·ªáu"

def find_by_sku_or_keyword(q: str, df: pd.DataFrame) -> pd.Series | None:
    """∆Øu ti√™n kh·ªõp theo m√£ (chu·ªói c√≥ s·ªë), n·∫øu kh√¥ng th√¨ t√¨m theo t·ª´ kh√≥a."""
    if df.empty: return None
    qn = q.lower()

    # 1) D·∫°ng m√£ c√≥ s·ªë (2187, Ace2187, Exc0601...)
    m = re.search(r"\b([A-Za-z]*\d{2,}[A-Za-z0-9]*)\b", q)
    if m:
        key = m.group(1).lower()
        mask = pd.Series([False]*len(df))
        for c in df.columns:
            try:
                mask |= df[c].astype(str).str.lower().str.contains(key, na=False)
            except Exception:
                pass
        subset = df[mask]
        if not subset.empty:
            return subset.iloc[0]

    # 2) Kh√¥ng c√≥ m√£: t√¨m theo keyword
    mask = pd.Series([False]*len(df))
    for c in df.columns:
        try:
            mask |= df[c].astype(str).str.lower().str.contains(qn, na=False)
        except Exception:
            pass
    subset = df[mask]
    if not subset.empty:
        return subset.iloc[0]
    return None

def make_price_line(row: pd.Series) -> str:
    ma = (str(row.get("ma","")) or "").strip() or "(kh√¥ng m√£)"
    ht = clean_price_text(row.get("hang_thuong",""))
    cc = clean_price_text(row.get("cao_cap",""))
    parts = [ma + ":"]
    if ht: parts.append(f"Th∆∞·ªùng {ht}.")
    if cc: parts.append(f"Cao c·∫•p {cc}.")
    return " ".join(parts).strip()

def detect_variant(txt: str) -> str | None:
    """Tr·∫£ v·ªÅ 'hang_thuong' ho·∫∑c 'cao_cap' n·∫øu ng∆∞·ªùi d√πng n√≥i r√µ."""
    t = txt.lower()
    if re.search(r"\b(cao\s*c·∫•p|cao cap)\b", t): return "cao_cap"
    if re.search(r"\b(th∆∞·ªùng|thuong)\b", t):     return "hang_thuong"
    return None

# ================== PH√ÇN TRANG DANH M·ª§C ==================
PAGE_SIZE = 10

def build_catalog_page(df: pd.DataFrame, page: int) -> tuple[str, InlineKeyboardMarkup | None]:
    total = len(df)
    if total == 0:
        return "Danh m·ª•c tr·ªëng.", None
    max_page = (total + PAGE_SIZE - 1) // PAGE_SIZE
    page = max(1, min(page, max_page))
    start = (page - 1) * PAGE_SIZE
    chunk = df.iloc[start:start + PAGE_SIZE]

    lines = [make_price_line(r) for _, r in chunk.iterrows()]
    header = f"üìö Trang {page}/{max_page} ‚Äî T·ªïng {total} SP"
    text = header + "\n" + "\n".join(lines)

    btn_row = []
    if page > 1:
        btn_row.append(InlineKeyboardButton("‚¨ÖÔ∏è Trang tr∆∞·ªõc", callback_data=f"CAT|P={page-1}"))
    if page < max_page:
        btn_row.append(InlineKeyboardButton("Trang sau ‚û°Ô∏è", callback_data=f"CAT|P={page+1}"))
    kb = InlineKeyboardMarkup([btn_row]) if btn_row else None
    return text, kb

# ================== HANDLERS ==================
async def set_commands(app):
    cmds = [
        BotCommand("start",    "B·∫Øt ƒë·∫ßu"),
        BotCommand("catalog",  "Danh s√°ch s·∫£n ph·∫©m"),
        BotCommand("warranty", "Ch·∫ø ƒë·ªô b·∫£o h√†nh"),
        BotCommand("leadtime", "Th·ªùi gian s·∫£n xu·∫•t"),
        BotCommand("contact",  "Li√™n h·ªá"),
    ]
    await app.bot.set_my_commands(cmds)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # Ch√†o 1 l·∫ßn duy nh·∫•t
    greeted = context.user_data.get("greeted", False)
    if not greeted:
        await update.message.reply_text(
            "Ch√†o m·ª´ng b·∫°n ƒë·∫øn ECCues. G√µ m√£ ho·∫∑c t√™n m·∫´u ƒë·ªÉ xem gi√° (Th∆∞·ªùng/Cao c·∫•p).",
            reply_markup=MAIN_KB
        )
        context.user_data["greeted"] = True
    else:
        await update.message.reply_text("G√µ m√£ ho·∫∑c t√™n m·∫´u ƒë·ªÉ xem gi√°.", reply_markup=MAIN_KB)

async def cmd_warranty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WARRANTY_TEXT, parse_mode="Markdown")

async def cmd_leadtime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(LEADTIME_TEXT, parse_mode="Markdown")

async def cmd_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(CONTACT_TEXT, parse_mode="Markdown")

async def cmd_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text, kb = build_catalog_page(CATALOG, page=1)
    await update.message.reply_text(text, reply_markup=kb, disable_web_page_preview=True)

async def on_catalog_nav(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data or ""
    try:
        page = int(data.split("P=", 1)[1])
    except Exception:
        page = 1
    text, kb = build_catalog_page(CATALOG, page=page)
    await q.edit_message_text(text=text, reply_markup=kb, disable_web_page_preview=True)

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    # Menu nhanh
    if text == MENU_LABELS["catalog"]:
        await cmd_catalog(update, context);  return
    if text == MENU_LABELS["warranty"]:
        await cmd_warranty(update, context); return
    if text == MENU_LABELS["leadtime"]:
        await cmd_leadtime(update, context); return
    if text == MENU_LABELS["contact"]:
        await cmd_contact(update, context);  return

    # N·∫øu ng∆∞·ªùi d√πng v·ª´a ch·ªçn bi·∫øn th·ªÉ sau khi ƒë√£ c√≥ s·∫£n ph·∫©m tr∆∞·ªõc ƒë√≥
    variant = detect_variant(text)
    last_product = context.user_data.get("last_product")
    if variant and last_product:
        await update.message.reply_text(
            f"B·∫°n ch·ªçn {('Cao c·∫•p' if variant=='cao_cap' else 'Th∆∞·ªùng')} cho {last_product}.\n\n{CONTACT_TEXT}",
            parse_mode="Markdown"
        )
        context.user_data.pop("last_product", None)
        return

    # Nh·∫≠n di·ªán s·∫£n ph·∫©m theo m√£/t·ª´ kh√≥a ‚Üí tr·∫£ gi√° ng·∫Øn g·ªçn
    row = find_by_sku_or_keyword(text, CATALOG)
    if row is not None:
        line = make_price_line(row)
        await update.message.reply_text(line)
        context.user_data["last_product"] = (str(row.get("ma","")) or "").strip() or "m·∫´u ƒë√£ ch·ªçn"
        return

    # Fallback c·ª±c ng·∫Øn
    await update.message.reply_text("G·ª≠i m√£ ho·∫∑c t√™n m·∫´u ƒë·ªÉ b√°o gi√° Th∆∞·ªùng/Cao c·∫•p.")

# ================== AIOHTTP WEB SERVER (Render) ==================
async def _post_init(app):
    await set_commands(app)

async def health(request):
    return web.Response(text="ok")

async def amain():
    application = ApplicationBuilder().token(BOT_TOKEN).post_init(_post_init).build()
    application.add_handler(CommandHandler("start",    cmd_start))
    application.add_handler(CommandHandler("warranty", cmd_warranty))
    application.add_handler(CommandHandler("leadtime", cmd_leadtime))
    application.add_handler(CommandHandler("contact",  cmd_contact))
    application.add_handler(CommandHandler("catalog",  cmd_catalog))
    application.add_handler(CallbackQueryHandler(on_catalog_nav, pattern=r"^CAT\|P=\d+$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    await application.initialize()
    await application.start()

    # ƒêƒÉng k√Ω webhook v·ªõi Telegram
    if WEBHOOK_URL:
        await application.bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
        logger.info("Webhook set to %s", WEBHOOK_URL)
    else:
        logger.warning("Ch∆∞a c√≥ WEBHOOK_URL. Set WEBHOOK_URL=https://<service>.onrender.com/telegram")

    # Aiohttp app: /healthz, / (GET) v√† /telegram (POST)
    async def telegram_webhook(request):
        try:
            data = await request.json()
        except Exception:
            return web.Response(status=400, text="bad json")
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return web.Response(text="ok")

    web_app = web.Application()
    web_app.router.add_get("/", health)
    web_app.router.add_get("/healthz", health)
    web_app.router.add_post("/telegram", telegram_webhook)

    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()
    logger.info("HTTP server started on 0.0.0.0:%s", PORT)

    try:
        await asyncio.Event().wait()
    finally:
        await application.stop()
        await application.shutdown()
        await runner.cleanup()

def main():
    asyncio.run(amain())

if __name__ == "__main__":
    main()
