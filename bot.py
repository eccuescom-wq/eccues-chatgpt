import os
import re
import pandas as pd
import asyncio
from aiohttp import web
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI

# ===== CONFIG =====
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
MODEL = os.getenv("MODEL", "gpt-4o-mini")
CATALOG_PATH = os.getenv("CATALOG_PATH", "Exc.csv")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 10000))

oai = OpenAI(api_key=OPENAI_API_KEY)

# ===== MENU =====
MENU_LABELS = {
    "catalog": "üìã Danh s√°ch s·∫£n ph·∫©m",
    "warranty": "üõ°Ô∏è Ch·∫ø ƒë·ªô b·∫£o h√†nh",
    "leadtime": "‚è≥ Th·ªùi gian s·∫£n xu·∫•t",
    "contact": "üìû Li√™n h·ªá"
}

# ===== TEXTS =====
WARRANTY_TEXT = (
    "üõ°Ô∏è *Ch·∫ø ƒë·ªô b·∫£o h√†nh*\n\n"
    "- H√†ng cao c·∫•p: cam k·∫øt ch·∫•t l∆∞·ª£ng gi·ªëng ch√≠nh h√£ng >95%\n"
    "- H√†ng trung b√¨nh: >90%\n"
    "- Zen: >90%\n"
    "- S∆°n l·∫°i mi·ªÖn ph√≠ 1 l·∫ßn (th·ªùi gian kh√¥ng qu√° 1 nƒÉm)"
)
LEADTIME_TEXT = (
    "‚è≥ *Th·ªùi gian s·∫£n xu·∫•t*\n\n"
    "Th√¥ng th∆∞·ªùng t·ª´ 3‚Äì4 th√°ng t√πy m·∫´u."
)
CONTACT_TEXT = (
    "üìû *Li√™n h·ªá*\n\n"
    "Telegram: @eccues\n"
    "Facebook: https://www.facebook.com/share/1CJbMHsZEM/?mibextid=wwXIfr"
)

# ===== PROMPT =====
SYSTEM_PROMPT = """B·∫°n l√† tr·ª£ l√Ω b√°n c∆° bi-a. M·ª•c ti√™u: tr·∫£ l·ªùi NG·∫ÆN, ƒê√öNG TR·ªåNG T√ÇM.

QUY T·∫ÆC:
- N·∫øu b·∫Øt ƒë∆∞·ª£c m√£ s·∫£n ph·∫©m ‚Üí tr·∫£ l·ªùi t·ª´ CSV (h√†ng th∆∞·ªùng/cao c·∫•p) r·ªìi h·ªèi 1 c√¢u duy nh·∫•t ƒë·ªÉ ch·ªët.
- N·∫øu kh√¥ng b·∫Øt ƒë∆∞·ª£c m√£ ‚Üí g·ª£i √Ω 1‚Äì2 l·ª±a ch·ªçn g·∫ßn nh·∫•t t·ª´ CSV.
- Kh√¥ng n√≥i gi√° chung chung, kh√¥ng m·ªü ƒë·∫ßu d√†i d√≤ng.
- Ch·ªâ h·ªèi 1 c√¢u duy nh·∫•t ·ªü cu·ªëi.
- Ng√¥n ng·ªØ: ti·∫øng Vi·ªát ho·∫∑c ti·∫øng anh n·∫øu kh√°ch h·ªèi b·∫±ng Ti·∫øng Anh
- Ch·ªâ c·∫ßn "Xin ch√†o" l·∫ßn ƒë·∫ßu ti√™n. Khi kh√°ch h√†ng h·ªèi c√≥ m√£ s·∫£n ph·∫©m th√¨ cho h·ªç 2 gi√° H√†ng th∆∞·ªùng v√† cao c·∫•p lu√¥n.
- Kh√¥ng c·∫ßn h·ªèi th·ªùi gian, khi n√†o kh√°ch ch·ªçn h√†ng th∆∞·ªùng hay cao c·∫•p m·ªõi tr·∫£ l·ªùi th·ªùi gian cho h·ªç.
"""

# ===== CSV =====
CATALOG = pd.read_csv(CATALOG_PATH)

# ===== UTILS =====
SKU_PAT = re.compile(r"\b([A-Za-z]*\d{2,}[A-Za-z0-9]*)\b", re.I)
BUDGET_PAT = re.compile(r"(\d+)(?:\s*-\s*(\d+))?\s*(m|tr|tri·ªáu|trieu)?", re.I)

def parse_budget(text: str):
    m = BUDGET_PAT.search(text)
    if not m: return None
    lo = int(m.group(1))
    hi = m.group(2)
    return (lo, int(hi) if hi else None)  # tri·ªáu

def lookup_by_sku(s: str, df: pd.DataFrame) -> pd.DataFrame:
    s = s.lower()
    mask = pd.Series([False]*len(df))
    for c in df.columns:
        try:
            mask |= df[c].astype(str).str.lower().str.contains(s, na=False)
        except Exception:
            pass
    return df[mask].head(1)

def render_csv_answer(row: pd.Series, budget=None) -> str:
    ma = str(row.get("ma","")).strip()
    ht = str(row.get("hang_thuong","")).strip()
    cc = str(row.get("cao_cap","")).strip()
    tg = str(row.get("thoi_gian_lam","")).strip()

    parts = []
    if ma: parts.append(f"{ma}:")
    if ht: parts.append(f"H√†ng th∆∞·ªùng {ht}.")
    if cc: parts.append(f"Cao c·∫•p {cc}.")
    if tg: parts.append(f"Th·ªùi gian l√†m {tg}.")

    # G·ª£i √Ω theo ng√¢n s√°ch
    if budget:
        lo, hi = budget
        def parse_price(s):
            m = re.search(r"(\d+)", s)
            return int(m.group(1)) if m else None
        ht_price = parse_price(ht)
        cc_price = parse_price(cc)
        pick = []
        if ht_price and ((hi and ht_price<=hi) or (not hi and ht_price<=lo)):
            pick.append("H√†ng th∆∞·ªùng h·ª£p ng√¢n s√°ch.")
        if cc_price and ((hi and cc_price<=hi) or (not hi and cc_price<=lo)):
            pick.append("Cao c·∫•p h·ª£p ng√¢n s√°ch.")
        if pick:
            parts.append(" / ".join(pick))

    parts.append("B·∫°n ch·ªçn h√†ng th∆∞·ªùng hay cao c·∫•p?")
    return " ".join(parts)

def search_df(query, df):
    q = query.lower()
    mask = pd.Series([False]*len(df))
    for c in df.columns:
        try:
            mask |= df[c].astype(str).str.lower().str.contains(q, na=False)
        except Exception:
            pass
    return df[mask]

def llm_reply(user_text, extra_context=""):
    prompt = f"Ng·ªØ c·∫£nh th√™m:\n{extra_context}\n\nC√¢u h·ªèi: {user_text}"
    resp = oai.responses.create(
        model=MODEL,
        input=[{"role":"system","content":SYSTEM_PROMPT},
               {"role":"user","content":prompt}],
        temperature=0.2,
        max_output_tokens=180
    )
    return resp.output_text.strip()

# ===== HANDLERS =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [[KeyboardButton(MENU_LABELS["catalog"])],
          [KeyboardButton(MENU_LABELS["warranty"])],
          [KeyboardButton(MENU_LABELS["leadtime"])],
          [KeyboardButton(MENU_LABELS["contact"])]]
    await update.message.reply_text(
        "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ECCues!",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
    )

async def cmd_catalog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = []
    for _, r in CATALOG.head(10).iterrows():
        ma = str(r.get("ma","")).strip()
        ht = str(r.get("hang_thuong","")).strip()
        cc = str(r.get("cao_cap","")).strip()
        tg = str(r.get("thoi_gian_lam","")).strip()
        lines.append(f"{ma}: Th∆∞·ªùng {ht}, Cao c·∫•p {cc}, {tg}")
    await update.message.reply_text("\n".join(lines))

async def cmd_warranty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WARRANTY_TEXT, parse_mode="Markdown")

async def cmd_leadtime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(LEADTIME_TEXT, parse_mode="Markdown")

async def cmd_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(CONTACT_TEXT, parse_mode="Markdown")

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()

    if txt == MENU_LABELS["catalog"]:
        await cmd_catalog(update, context); return
    if txt == MENU_LABELS["warranty"]:
        await cmd_warranty(update, context); return
    if txt == MENU_LABELS["leadtime"]:
        await cmd_leadtime(update, context); return
    if txt == MENU_LABELS["contact"]:
        await cmd_contact(update, context); return

    budget = parse_budget(txt)
    m = SKU_PAT.search(txt)
    if m:
        sku = m.group(1)
        df1 = lookup_by_sku(sku, CATALOG)
        if not df1.empty:
            ans = render_csv_answer(df1.iloc[0], budget)
            await update.message.reply_text(ans)
            return

    found = search_df(txt, CATALOG).head(3)
    extra = "\n".join([f"{r['ma']}: Th∆∞·ªùng {r['hang_thuong']}, Cao c·∫•p {r['cao_cap']}, {r['thoi_gian_lam']}" for _, r in found.iterrows()])
    ans = llm_reply(txt, extra_context=extra)
    await update.message.reply_text(ans)

# ===== WEBHOOK SERVER =====
async def _post_init(app):
    pass

async def health(request):
    return web.Response(text="ok")

async def amain():
    application = ApplicationBuilder().token(BOT_TOKEN).post_init(_post_init).build()

    # ƒëƒÉng k√Ω handlers (start, catalog, warranty, leadtime, contact, on_text, ...)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    # (n·∫øu b·∫°n c√≥ th√™m c√°c CommandHandler kh√°c, gi·ªØ nguy√™n)

    await application.initialize()
    await application.start()

    # ƒêƒÉng k√Ω webhook v·ªõi Telegram
    if WEBHOOK_URL:
        await application.bot.set_webhook(WEBHOOK_URL)

    # --- AioHTTP server + health + webhook ---
    async def health(request):
        return web.Response(text="ok")

    async def telegram_webhook(request):
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return web.Response(text="ok")

    web_app = web.Application()
    web_app.router.add_get("/", health)
    web_app.router.add_get("/healthz", health)
    web_app.router.add_post("/telegram", telegram_webhook)

    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=PORT)
    await site.start()

    try:
        await asyncio.Event().wait()
    finally:
        await application.stop()
        await application.shutdown()
        await runner.cleanup()


def main():
    asyncio.run(amain())

if __name__ == "__main__":
    main()
